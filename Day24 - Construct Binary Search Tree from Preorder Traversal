/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

class Solution {
public:
    
    int precount=0;
    
    int findIndex(vector<int> in,int s, int e, int key){
        for(int i=s;i<=e;i++){
            if(in[i]==key){
                return i;
            }
        }
        return -1;
    }
    
    TreeNode* buildTree(vector<int> pre, vector<int> in, int s, int e){
        
        if(s>e){
            return NULL;
        }
        
        TreeNode* node = new TreeNode(pre[precount++]);
        if(s==e){
            return node;
        }
        
        int ind=findIndex(in,s,e,node->val);
        
        node->left=buildTree(pre,in,s,ind-1);
        node->right=buildTree(pre,in,ind+1,e);
        
        return node;
    }
    
    TreeNode* bstFromPreorder(vector<int>& preorder) {
        vector<int> pre;
        pre=preorder;
        sort(preorder.begin(),preorder.end());
        vector<int> in;
        in = preorder;
        
        return buildTree(pre,in,0,in.size()-1);
    }
};
