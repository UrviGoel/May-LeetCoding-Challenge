class Solution {
public:
    bool possibleBipartition(int N, vector<vector<int>>& dislikes) {
        vector<int> color(N,-1);
        vector<vector<int>> graph(N);
        
        for (int i=0; i< dislikes.size(); i++) {
            graph[(dislikes[i][0])-1].push_back((dislikes[i][1])-1);
            graph[(dislikes[i][1])-1].push_back((dislikes[i][0])-1);  
        }
        
        for(int i=0;i<N;i++){
            if(color[i]==-1 && !dfs(graph,color,i,0))
                return false;
        }
        return true;
    }
    
    bool dfs(vector<vector<int>> &graph,vector<int> &color, int v, int c){
        if(color[v]==-1){
            color[v]=c;
        }
        else{
            return color[v]==c;
        }
        
        
        for (int i=0; i<graph[v].size(); i++){
            if(!dfs(graph,color,graph[v][i],1-c))
                return false;
        }
        return true;
    }
};
